//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SignaloBot.WebNotifications.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class WebNotificationScripts {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal WebNotificationScripts() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SignaloBot.WebNotifications.Resources.WebNotificationScripts", typeof(WebNotificationScripts).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ALTER TABLE [dbo].[pref_NotificationsMeta] ADD CONSTRAINT DF_NotificationMetaID_Default DEFAULT NEWSEQUENTIALID() FOR NotificationMetaID;.
        /// </summary>
        public static string alt_NotificationsMeta_Default {
            get {
                return ResourceManager.GetString("alt_NotificationsMeta_Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE NONCLUSTERED INDEX [IX_CategoryID] ON [dbo].[pref_Notifications] ([CategoryID]).
        /// </summary>
        public static string foreignKeyIndex_Notifications_CategoryID {
            get {
                return ResourceManager.GetString("foreignKeyIndex_Notifications_CategoryID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE NONCLUSTERED INDEX [IX_NotificationID] ON [dbo].[pref_NotificationsMeta] ([NotificationID]).
        /// </summary>
        public static string foreignKeyIndex_NotificationsMeta_NotificationID {
            get {
                return ResourceManager.GetString("foreignKeyIndex_NotificationsMeta_NotificationID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE INDEX [IX_pref_Notifications_UniqueTopic] ON [dbo].[pref_Notifications]([UserID], [CategoryID], [TopicID]).
        /// </summary>
        public static string index_Notifications_UniqueTopic {
            get {
                return ResourceManager.GetString("index_Notifications_UniqueTopic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE INDEX [IX_pref_NotificationsMeta_Meta] ON [dbo].[pref_NotificationsMeta]([MetaType], [MetaKey]).
        /// </summary>
        public static string index_NotificationsMeta_Meta {
            get {
                return ResourceManager.GetString("index_NotificationsMeta_Meta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE INDEX [IX_pref_NotificationsMeta_NotificationID] ON [dbo].[pref_NotificationsMeta]([NotificationID]).
        /// </summary>
        public static string index_NotificationsMeta_NotificationID {
            get {
                return ResourceManager.GetString("index_NotificationsMeta_NotificationID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE INDEX [IX_pref_NotificationsMeta_UserID] ON [dbo].[pref_NotificationsMeta]([UserID]).
        /// </summary>
        public static string index_NotificationsMeta_UserID {
            get {
                return ResourceManager.GetString("index_NotificationsMeta_UserID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE PROCEDURE [dbo].[pref_Notifications_Insert]
        ///	@CategoryID INT,
        ///	@TopicID INT,
        ///	@NotifyText NVARCHAR(MAX),
        ///	@Tag NVARCHAR(MAX),
        ///	@Variant INT,
        ///	@Culture NVARCHAR(MAX),
        ///	@NotifyMetas pref_NotificationMetaType READONLY,
        ///	@UserIDs pref_GuidType READONLY
        ///AS
        ///
        ///DECLARE @Now DATETIME2 = GETUTCDATE()
        ///
        ///--таблица номеров оповещений
        ///DECLARE @UserIDTable TABLE(
        ///	ID UNIQUEIDENTIFIER,
        ///	NewNotifyID UNIQUEIDENTIFIER DEFAULT NEWSEQUENTIALID()
        ///)
        ///
        ///INSERT @UserIDTable (ID)
        ///SELECT ID FROM @UserIDs
        ///
        ///
        ///- [rest of string was truncated]&quot;;.
        /// </summary>
        public static string proc_Notifications_Insert {
            get {
                return ResourceManager.GetString("proc_Notifications_Insert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE PROCEDURE [dbo].[pref_Notifications_SelectUpdateLastVisit]
        ///	@UserID UNIQUEIDENTIFIER,
        ///	@FirstIndex INT,
        ///	@LastIndex INT,
        ///	@UpdateVisit BIT
        ///AS
        ///
        ///IF @UpdateVisit = 1
        ///BEGIN
        ///	UPDATE pref_UserDeliveryTypeSettings
        ///	SET LastUserVisitUtc = GETUTCDATE()
        ///	WHERE UserID = @UserID
        ///END
        ///
        ///
        ///SELECT NotificationID, CategoryID, TopicID, NotifyText, SendDateUtc, IsDirty, Variant, Culture, Tag,
        ///up + down - 1 AS TotalRows FROM
        ///(	
        ///	SELECT *,
        ///		ROW_NUMBER() OVER(ORDER BY NotificationID) AS up,
        ///		ROW_NUMBER [rest of string was truncated]&quot;;.
        /// </summary>
        public static string proc_Notifications_SelectUpdateLastVisit {
            get {
                return ResourceManager.GetString("proc_Notifications_SelectUpdateLastVisit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE PROCEDURE [dbo].[pref_Notifications_Upsert]
        ///	@CategoryID INT,
        ///	@TopicID INT,	
        ///	@NotifyText NVARCHAR(MAX),
        ///	@Tag NVARCHAR(MAX),
        ///	@Variant INT,
        ///	@Culture NVARCHAR(MAX),
        ///	@NotifyMetas pref_NotificationMetaType READONLY,
        ///	@UserIDs pref_GuidType READONLY
        ///AS
        ///
        ///--таблица номеров оповещений
        ///DECLARE @UserIDTable TABLE(
        ///	ID UNIQUEIDENTIFIER,
        ///	NewNotifyID UNIQUEIDENTIFIER DEFAULT NEWSEQUENTIALID()
        ///)
        ///
        ///INSERT @UserIDTable (ID)
        ///SELECT ID FROM @UserIDs
        ///
        ///
        ///--добавляем оповещения
        ///MERGE pref_Notifi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string proc_Notifications_Upsert {
            get {
                return ResourceManager.GetString("proc_Notifications_Upsert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE PROCEDURE [dbo].[pref_NotificationsMeta_InsertNewType]
        ///	@CategoryID INT,
        ///	@MetaType NVARCHAR(4000),
        ///	@MetaKey NVARCHAR(4000),
        ///	@MetaValue NVARCHAR(4000)
        ///AS
        ///
        ///MERGE pref_NotificationsMeta AS TARGET
        ///USING 
        ///(
        ///	SELECT DISTINCT NotificationID, UserID, TopicID FROM pref_Notifications
        ///	WHERE CategoryID = @CategoryID
        ///) AS SOURCE
        ///ON TARGET.NotificationID = SOURCE.NotificationID
        ///	AND TARGET.MetaType = @MetaType
        ///WHEN MATCHED THEN UPDATE SET
        ///	TARGET.MetaKey = @MetaKey,
        ///	TARGET.MetaValue = @MetaVa [rest of string was truncated]&quot;;.
        /// </summary>
        public static string proc_NotificationsMeta_InsertNewType {
            get {
                return ResourceManager.GetString("proc_NotificationsMeta_InsertNewType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE PROCEDURE [dbo].[pref_NotificationsMeta_Update]
        ///	@MetaType NVARCHAR(4000),
        ///	@MetaKey NVARCHAR(4000),
        ///	@MetaValue NVARCHAR(MAX)
        ///AS
        ///
        ///
        ///DECLARE @NotifyTmp TABLE(
        ///	NotificationID UNIQUEIDENTIFIER
        ///)
        ///
        ///INSERT @NotifyTmp (NotificationID)
        ///SELECT NotificationID FROM pref_NotificationsMeta
        ///WHERE MetaType = @MetaType
        ///AND MetaKey = @MetaKey
        ///AND MetaValue &lt;&gt; @MetaValue
        ///
        ///UPDATE pref_NotificationsMeta
        ///SET MetaValue = @MetaValue
        ///WHERE MetaType = @MetaType
        ///AND MetaKey = @MetaKey
        ///AND MetaValue &lt;&gt; @M [rest of string was truncated]&quot;;.
        /// </summary>
        public static string proc_NotificationsMeta_Update {
            get {
                return ResourceManager.GetString("proc_NotificationsMeta_Update", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TYPE [dbo].[pref_NotificationType] AS TABLE(
        ///	[NotificationID]         UNIQUEIDENTIFIER NOT NULL,   
        ///    [NotifyText]       NVARCHAR (MAX)   NOT NULL,
        ///    [IsDirty]          BIT              NOT NULL	
        ///).
        /// </summary>
        public static string type_Notification {
            get {
                return ResourceManager.GetString("type_Notification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TYPE [dbo].[pref_NotificationMetaType] AS TABLE(
        ///	[NotificationMetaID] [uniqueidentifier] NOT NULL,
        ///	[NotificationID] [uniqueidentifier] NOT NULL,
        ///	[UserID] [uniqueidentifier] NOT NULL,
        ///	[MetaType] [nvarchar](max) NOT NULL,
        ///	[MetaKey] [nvarchar](max) NOT NULL,
        ///	[MetaValue] [nvarchar](max) NOT NULL
        ///).
        /// </summary>
        public static string type_NotificationMeta {
            get {
                return ResourceManager.GetString("type_NotificationMeta", resourceCulture);
            }
        }
    }
}

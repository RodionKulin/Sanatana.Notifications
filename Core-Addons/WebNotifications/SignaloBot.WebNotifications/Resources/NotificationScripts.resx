<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="alt_NotificationsMeta_Default" xml:space="preserve">
    <value>ALTER TABLE [dbo].[pref_NotificationsMeta] ADD CONSTRAINT DF_NotificationMetaID_Default DEFAULT NEWSEQUENTIALID() FOR NotificationMetaID;</value>
  </data>
  <data name="foreignKeyIndex_NotificationsMeta_NotificationID" xml:space="preserve">
    <value>CREATE NONCLUSTERED INDEX [IX_NotificationID] ON [dbo].[pref_NotificationsMeta] ([NotificationID])</value>
  </data>
  <data name="foreignKeyIndex_Notifications_CategoryID" xml:space="preserve">
    <value>CREATE NONCLUSTERED INDEX [IX_CategoryID] ON [dbo].[pref_Notifications] ([CategoryID])</value>
  </data>
  <data name="index_NotificationsMeta_Meta" xml:space="preserve">
    <value>CREATE INDEX [IX_pref_NotificationsMeta_Meta] ON [dbo].[pref_NotificationsMeta]([MetaType], [MetaKey])</value>
  </data>
  <data name="index_NotificationsMeta_NotificationID" xml:space="preserve">
    <value>CREATE INDEX [IX_pref_NotificationsMeta_NotificationID] ON [dbo].[pref_NotificationsMeta]([NotificationID])</value>
  </data>
  <data name="index_NotificationsMeta_UserID" xml:space="preserve">
    <value>CREATE INDEX [IX_pref_NotificationsMeta_UserID] ON [dbo].[pref_NotificationsMeta]([UserID])</value>
  </data>
  <data name="index_Notifications_UniqueTopic" xml:space="preserve">
    <value>CREATE INDEX [IX_pref_Notifications_UniqueTopic] ON [dbo].[pref_Notifications]([UserID], [CategoryID], [TopicID])</value>
  </data>
  <data name="proc_NotificationsMeta_InsertNewType" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[pref_NotificationsMeta_InsertNewType]
	@CategoryID INT,
	@MetaType NVARCHAR(4000),
	@MetaKey NVARCHAR(4000),
	@MetaValue NVARCHAR(4000)
AS

MERGE pref_NotificationsMeta AS TARGET
USING 
(
	SELECT DISTINCT NotificationID, UserID, TopicID FROM pref_Notifications
	WHERE CategoryID = @CategoryID
) AS SOURCE
ON TARGET.NotificationID = SOURCE.NotificationID
	AND TARGET.MetaType = @MetaType
WHEN MATCHED THEN UPDATE SET
	TARGET.MetaKey = @MetaKey,
	TARGET.MetaValue = @MetaValue
WHEN NOT MATCHED BY TARGET THEN
	INSERT (NotificationID, UserID, CategoryID, TopicID, MetaType, MetaKey, MetaValue)
	VALUES (SOURCE.NotificationID, SOURCE.UserID, @CategoryID, SOURCE.TopicID, @MetaType, @MetaKey, @MetaValue);</value>
  </data>
  <data name="proc_NotificationsMeta_Update" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[pref_NotificationsMeta_Update]
	@MetaType NVARCHAR(4000),
	@MetaKey NVARCHAR(4000),
	@MetaValue NVARCHAR(MAX)
AS


DECLARE @NotifyTmp TABLE(
	NotificationID UNIQUEIDENTIFIER
)

INSERT @NotifyTmp (NotificationID)
SELECT NotificationID FROM pref_NotificationsMeta
WHERE MetaType = @MetaType
AND MetaKey = @MetaKey
AND MetaValue &lt;&gt; @MetaValue

UPDATE pref_NotificationsMeta
SET MetaValue = @MetaValue
WHERE MetaType = @MetaType
AND MetaKey = @MetaKey
AND MetaValue &lt;&gt; @MetaValue

MERGE pref_Notifications AS TARGET
USING @NotifyTmp AS SOURCE
ON TARGET.NotificationID = SOURCE.NotificationID
WHEN MATCHED THEN 
	UPDATE SET IsDirty = 1;</value>
  </data>
  <data name="proc_Notifications_Insert" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[pref_Notifications_Insert]
	@CategoryID INT,
	@TopicID INT,
	@NotifyText NVARCHAR(MAX),
	@Tag NVARCHAR(MAX),
	@Variant INT,
	@Culture NVARCHAR(MAX),
	@NotifyMetas pref_NotificationMetaType READONLY,
	@UserIDs pref_GuidType READONLY
AS

DECLARE @Now DATETIME2 = GETUTCDATE()

--таблица номеров оповещений
DECLARE @UserIDTable TABLE(
	ID UNIQUEIDENTIFIER,
	NewNotifyID UNIQUEIDENTIFIER DEFAULT NEWSEQUENTIALID()
)

INSERT @UserIDTable (ID)
SELECT ID FROM @UserIDs


--добавляем оповещение
INSERT pref_Notifications (NotificationID, UserID, CategoryID, TopicID, NotifyText, SendDateUtc, IsDirty, Tag, Variant, Culture)
SELECT NewNotifyID, ID, @CategoryID, @TopicID, @NotifyText, @Now, 0, @Tag, @Variant, @Culture
FROM @UserIDTable


--добавляем мета данные
INSERT pref_NotificationsMeta (UserID, NotificationID, CategoryID, TopicID, MetaType, MetaKey, MetaValue)
SELECT ID, NewNotifyID, @CategoryID, @TopicID, MetaType, MetaKey, MetaValue
FROM @NotifyMetas
CROSS JOIN @UserIDTable</value>
  </data>
  <data name="proc_Notifications_SelectUpdateLastVisit" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[pref_Notifications_SelectUpdateLastVisit]
	@UserID UNIQUEIDENTIFIER,
	@FirstIndex INT,
	@LastIndex INT,
	@UpdateVisit BIT
AS

IF @UpdateVisit = 1
BEGIN
	UPDATE pref_UserDeliveryTypeSettings
	SET LastUserVisitUtc = GETUTCDATE()
	WHERE UserID = @UserID
END


SELECT NotificationID, CategoryID, TopicID, NotifyText, SendDateUtc, IsDirty, Variant, Culture, Tag,
up + down - 1 AS TotalRows FROM
(	
	SELECT *,
		ROW_NUMBER() OVER(ORDER BY NotificationID) AS up,
		ROW_NUMBER() OVER(ORDER BY NotificationID DESC) AS down
	FROM pref_Notifications
	WHERE UserID = @UserID
) AS sub
WHERE sub.down BETWEEN @FirstIndex AND @LastIndex</value>
  </data>
  <data name="proc_Notifications_Upsert" xml:space="preserve">
    <value>CREATE PROCEDURE [dbo].[pref_Notifications_Upsert]
	@CategoryID INT,
	@TopicID INT,	
	@NotifyText NVARCHAR(MAX),
	@Tag NVARCHAR(MAX),
	@Variant INT,
	@Culture NVARCHAR(MAX),
	@NotifyMetas pref_NotificationMetaType READONLY,
	@UserIDs pref_GuidType READONLY
AS

--таблица номеров оповещений
DECLARE @UserIDTable TABLE(
	ID UNIQUEIDENTIFIER,
	NewNotifyID UNIQUEIDENTIFIER DEFAULT NEWSEQUENTIALID()
)

INSERT @UserIDTable (ID)
SELECT ID FROM @UserIDs


--добавляем оповещения
MERGE pref_Notifications AS TARGET
USING @UserIDTable AS SOURCE
ON TARGET.UserID = SOURCE.ID
	AND TARGET.CategoryID = @CategoryID
	AND TARGET.TopicID = @TopicID
WHEN MATCHED THEN UPDATE SET
	NotifyText = @NotifyText,
	SendDateUtc = GETUTCDATE(),
	IsDirty = 0,
	Tag = @Tag,
	Variant = @Variant,
	Culture = @Culture
WHEN NOT MATCHED BY TARGET THEN
	INSERT (NotificationID, UserID, CategoryID, TopicID, NotifyText, SendDateUtc, IsDirty, Tag, Variant, Culture)
	VALUES (SOURCE.NewNotifyID, SOURCE.ID, @CategoryID, @TopicID, @NotifyText, GETUTCDATE(), 0, @Tag, @Variant, @Culture);


	
--добавляем мета данные
MERGE pref_NotificationsMeta AS TARGET
USING 
(
	SELECT utable.ID, utable.NewNotifyID,
		metas.MetaType, metas.MetaKey, metas.MetaValue
	FROM @NotifyMetas as metas
	CROSS JOIN @UserIDTable as utable
)
AS SOURCE
ON TARGET.UserID = SOURCE.ID
	AND TARGET.CategoryID = @CategoryID
	AND TARGET.TopicID = @TopicID
	AND TARGET.MetaType = SOURCE.MetaType
WHEN MATCHED THEN UPDATE SET
	TARGET.MetaKey = SOURCE.MetaKey,
	TARGET.MetaValue = SOURCE.MetaValue
WHEN NOT MATCHED BY TARGET THEN
	INSERT (NotificationID, UserID, CategoryID, TopicID, MetaType, MetaKey, MetaValue)
	VALUES (SOURCE.NewNotifyID, SOURCE.ID, @CategoryID, @TopicID,
	  SOURCE.MetaType, SOURCE.MetaKey, SOURCE.MetaValue);</value>
  </data>
  <data name="type_Notification" xml:space="preserve">
    <value>CREATE TYPE [dbo].[pref_NotificationType] AS TABLE(
	[NotificationID]         UNIQUEIDENTIFIER NOT NULL,   
    [NotifyText]       NVARCHAR (MAX)   NOT NULL,
    [IsDirty]          BIT              NOT NULL	
)</value>
  </data>
  <data name="type_NotificationMeta" xml:space="preserve">
    <value>CREATE TYPE [dbo].[pref_NotificationMetaType] AS TABLE(
	[NotificationMetaID] [uniqueidentifier] NOT NULL,
	[NotificationID] [uniqueidentifier] NOT NULL,
	[UserID] [uniqueidentifier] NOT NULL,
	[MetaType] [nvarchar](max) NOT NULL,
	[MetaKey] [nvarchar](max) NOT NULL,
	[MetaValue] [nvarchar](max) NOT NULL
)</value>
  </data>
</root>